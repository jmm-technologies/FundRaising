@page "/campaign/{campaignaddress}"
@using System.ComponentModel.DataAnnotations;
@inherits IPFSBase
@inject ISnackbar _snackBar
@inject IMetaMaskService _metaMaskService
@inject RabbitMQService _svc
<PageTitle>Campaign</PageTitle>

@code {
    [Parameter]
    public string CampaignAddress { get; set; }
    public Campagin UnitCampaign { get; set; } = null;
    public string Description { get; set; } = null;
    public double DonateAmount { get; set; } = 0;
    public List<Transaction> Transactions { get; set; } = null;
    public List<CampainUpdate> CampainUpdates { get; set; } = null;
    [CascadingParameter]
    private Task<AuthenticationState> _authTask { get; set; }
    public RewardClass _rewardClass { get; set; } = new();

    public class RewardClass
    {
        [Range(0.01,100)]
        public double Amount { get; set; }
    }
    protected override Task OnInitializedAsync()
    {
        Task<Campagin> campaign = GetCampaginsByAddress(CampaignAddress);
        campaign.ContinueWith((e) =>
        {
            UnitCampaign = e.Result;
            StateHasChanged();
            GetDescriptionFromPINATA(UnitCampaign.descriptionhash)
                .ContinueWith((f) =>
                {
                    Description = f.Result;
                    StateHasChanged();
                });
        });
        GetTranactionsByAddress(CampaignAddress).ContinueWith((e) =>
        {
            Transactions = e.Result;
            StateHasChanged();
        });
        GetUpdatesByAddress(CampaignAddress).ContinueWith((e) =>
        {
            CampainUpdates = e.Result;
            StateHasChanged();
        });
        return base.OnInitializedAsync();
    }


    private async void DonateFunc()
    {
        var _auth = await _authTask;
        var user = _auth.User;
        if (!(user.Identity.IsAuthenticated))
        {
            _snackBar.Add($"Please connect to Metamask!", Severity.Error);
            return;
        }
        else
        {
            try
            {
                await DonateFunc(DonateAmount, CampaignAddress);
                _snackBar.Add($"Transaction Confirmed", Severity.Success);
                await GetTranactionsByAddress(CampaignAddress).ContinueWith((e) =>
                {
                    Transactions = e.Result;
                    StateHasChanged();
                });
                var address = user.Claims.FirstOrDefault(a => a.Type.Equals("address")).Value.ToString();
                await _svc.SendMail(new RabbitMQService.EmailData()
                    {
                        email = UnitCampaign.email,
                        message = address = " just donated " + DonateAmount+" ETH",
                        name = address
                    }
                );
            }
            catch (Exception e)
            {
                _snackBar.Add(e.Message, Severity.Error);
            }
        }
    }
    private async void ApproveFunc()
    {
        var _auth = await _authTask;
        var user = _auth.User;
        if (!(user.Identity.IsAuthenticated))
        {
            _snackBar.Add($"Please connect to Metamask!", Severity.Error);
            return;
        }
        else
        {
            try
            {
                await ApproveCampaignFunc(CampaignAddress);
                _snackBar.Add($"Transaction Confirmed", Severity.Success);
            }
            catch (Exception e)
            {
                _snackBar.Add(e.Message, Severity.Error);
            }
        }
    }

    private void IncrementFunc()
    {
        DonateAmount = DonateAmount + 0.1;
        DonateAmount = Math.Round(DonateAmount, 2);
    }
    private void DecrementFunc()
    {
        if (DonateAmount - 0.1 > 0)
            DonateAmount = DonateAmount - 0.1;
        else
            DonateAmount = 0;
        DonateAmount = Math.Round(DonateAmount, 2);
    }

    private async void DistributeRewardFunc()
    {
        var _auth = await _authTask;
        var user = _auth.User;
        if (!(user.Identity.IsAuthenticated))
        {
            _snackBar.Add($"Please connect to Metamask!", Severity.Error);
            return;
        }
        else
        {
            try
            {
                await DistributeReward(_rewardClass.Amount, CampaignAddress);
                _snackBar.Add($"Transaction Confirmed", Severity.Success);
                await GetTranactionsByAddress(CampaignAddress).ContinueWith((e) =>
                {
                    Transactions = e.Result;
                    StateHasChanged();
                });
            }
            catch (Exception e)
            {
                _snackBar.Add(e.Message, Severity.Error);
            }
        }
    }
}

<!--page-title-area start-->
<section class="page-title-area d-flex justify-content-center align-items-center" style="background-image:url(assets/img/bg/campaignPageHeader.png);">
    <div class="container">
        <div class="row">
            <div class="col-xl-10 offset-xl-1">
                <div class=" text-center">
                    <h1 class="page-title  fw-600 f-45 wow fadeInUp2 animated text-buzz-in " data-wow-delay='.1s'>Campaign</h1>
                    <h6 class="page-title  fw-600  wow fadeInUp2 animated text-buzz-in " data-wow-delay='.1s'><a class="active" target="_blank" href="@(StaticUtils.GOERLI_ETHERSCAN+"/"+CampaignAddress)">@CampaignAddress</a></h6>
                </div>
            </div>
        </div>
    </div>
</section>
<!--page-title-area area-->
<!--project-area start-->
<section class="project-image-area grey-bg pt-130 pb-100" style="background-image:url(assets/img/shape/09.png);">
    <div class="container">
        <div class="row no-gutters">
            <div class="col-xl-7 card-img-height">
                <div class="project-img mb-30 wow fadeInUp2 animated" data-wow-delay='.1s'>
                    <img src="@(StaticUtils.PINATA_GATEWAY+"/"+UnitCampaign?.imghash)" class="card-img-height" alt="">
                </div>
            </div>
            <div class="col-xl-5  wow fadeInUp2 animated card-img-height" data-wow-delay='.1s'>
                <div class="projects project-cart white-bg mb-30 card-img-height">
                    <div class="projects__content">
                        <a href="#" class="new-tag">@UnitCampaign?.category</a>
                        <h3><a href="javascript:void(0);">@(UnitCampaign?.title)</a></h3>
                        <div class="projects__manager d-sm-flex align-items-center mb-40">
                            <div class="manager-img mr-20">
                                <img src="assets/img/project/03.png" alt="">
                            </div>
                            <div class="name">
                                <a target="_blank" href="@(StaticUtils.GOERLI_ETHERSCAN+"/"+UnitCampaign?.owner)">
                                    <h5>@(UnitCampaign?.owner.Substring(0, 5))...@(UnitCampaign?.owner.Substring(UnitCampaign.owner.Length - 12))</h5>
                                </a>
                                <address>
                                    @*<a href="#">9 Campaigns</a>*@
                                    @*<a href="#"><i class="far fa-map-marker-alt"></i> 55 Main Street, New York</a>*@
                                    <a href="#"><i class="far fa-clock"></i>  @((UnitCampaign != null) ? DateTime.Parse(UnitCampaign?.publisheddate, System.Globalization.CultureInfo.CurrentCulture).ToString("MM:dd:yyyy") : "")</a>
                                </address>
                            </div>
                        </div>
                        <div class="skill mb-20">
                            <p class="skill-para">
                                Required &nbsp;&nbsp;
                                <span>
                                    @if (UnitCampaign != null)
                                    {
                                        <div>@UnitCampaign?.amountrequired</div>
                                    }
                                    @*@(UnitCampaign?.amountrequired ?? "0")*@
                                    &nbsp;ETH
                                </span>
                            </p>
                            <div class="progress">
                                <div class="progress-bar"
                                     role="progressbar"
                                     aria-valuenow="100"
                                     style="width:@(Transactions!=null?((Transactions?.Select(a=>float.Parse(a.amount)).Sum())/float.Parse(UnitCampaign?.amountrequired))*100 :"0")%;"
                                     aria-valuemin="0"
                                     aria-valuemax="@UnitCampaign?.amountrequired">
                                    <h5>@(Transactions != null ? ((Transactions?.Select(a => float.Parse(a.amount)).Sum()) / float.Parse(UnitCampaign?.amountrequired)) * 100 : "0")%</h5>
                                </div>
                            </div>
                        </div>
                        @*<br />*@
                        @*<p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusante doloremque lauda</p>*@
                        <ul class="cart-list d-sm-flex align-items-center">
                            <li>
                                <form class="cart-plus-minus" action="form.php">
                                    <div class="plus-minus pos-rel">
                                        <input type="text" @bind-value="@DonateAmount">
                                        <div @onclick="DecrementFunc" class="updown plus"><i class="far fa-chevron-left"></i></div>
                                        <div @onclick="IncrementFunc" class="updown minus"><i class="far fa-chevron-right"></i></div>
                                    </div>
                                </form>
                            </li>
                            <li>
                                <a class="theme_btn theme_btn_bg custom-theme-btn" @onclick="DonateFunc" data-animation="fadeInLeft" data-delay=".5s">
                                    Donate
                                </a>
                            </li>
                            <li>
                                <a class="theme_btn theme_btn_bg custom-theme-btn" @onclick="ApproveFunc" data-animation="fadeInLeft" data-delay=".5s">
                                    Approve
                                </a>
                            </li>
                            @*<i class="far fa-arrow-right"></i>*@
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
<!--project-area end-->
<!--our-overview-area start-->
<section class="our-overview-area pos-rel  wow fadeInUp2 animated" data-wow-delay='.1s'>
    <MudTabs Outlined="true" Position="Position.Left" Rounded="true" Border="true"
             ApplyEffectsToContainer="true" Class="mt-8" PanelClass="pa-6">
        <MudTabPanel Text="Description">
            <Description Contents="@Description" />
        </MudTabPanel>
        <MudTabPanel Text="Updates">
            <Updates CampaignUpdates="CampainUpdates" />
        </MudTabPanel>
        <MudTabPanel Text="Backer List">
            <Transactions List="@Transactions" />
        </MudTabPanel>
        <MudTabPanel Text="Distribute Reward">


            <EditForm Model="_rewardClass" OnValidSubmit="DistributeRewardFunc">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <MudItem xs="6" sm="12" md="6" lg="6">
                    <MudTextField @bind-Value="_rewardClass.Amount" Class="custom-mud-input" Label="Update Title" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Abc" AdornmentColor="Color.Primary" />
                    <ValidationMessage For="()=>_rewardClass.Amount"></ValidationMessage>
                </MudItem>
                <MudItem xs="12" sm="12" md="12" lg="12" Style="text-align:center;">
                    <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Submit" Color="Color.Primary">
                        <div>Distibute Reward</div>
                    </MudButton>
                </MudItem>
            </EditForm>
        </MudTabPanel>


        <MudTabPanel Text="Update Progress">
            <UpdateProgress CampaignAddress="@CampaignAddress"></UpdateProgress>
        </MudTabPanel>
    </MudTabs>
</section>
