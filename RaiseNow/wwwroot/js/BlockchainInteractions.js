import{ethers as n}from"./_snowpack/pkg/ethers.js";import l from"./artifacts/contracts/Campaign.sol/Campaign.json.proxy.js";import d from"./artifacts/contracts/Campaign.sol/CampaignFactory.json.proxy.js";import{UploadDescoIPFS as w,UploadFileToIPFS as y}from"./PinataInteractions.js";export const GetAllCompaignFuncJS=async(r,o)=>{const e=new n.providers.JsonRpcBatchProvider(o),s=new n.Contract(r,d.abi,e),a=s.filters.CampaignCreatedEvent();return(await s.queryFilter(a)).map(t=>({title:t.args.title,campaignaddress:t.args.campignAddress,category:t.args.category,descriptionhash:t.args.descHash,imghash:t.args.imgHash,amountrequired:n.utils.formatEther(t.args.requiredAmount),owner:t.args.owner,email:t.args.email,publisheddate:new Date(parseInt(t.args.timestamp)*1e3).toLocaleString()}))},GetCompaignsByCategoryIndexFuncJS=async(r,o,e)=>{const s=new n.providers.JsonRpcBatchProvider(e),a=new n.Contract(r,d.abi,s),c=a.filters.CampaignCreatedEvent(null,o);return(await a.queryFilter(c)).map(i=>({title:i.args.title,campaignaddress:i.args.campignAddress,category:i.args.category,descriptionhash:i.args.descHash,imghash:i.args.imgHash,amountrequired:n.utils.formatEther(i.args.requiredAmount),owner:i.args.owner,email:i.args.email,publisheddate:new Date(parseInt(i.args.timestamp)*1e3).toLocaleString()}))},GetUnitCompaignsByAddressFuncJS=async(r,o,e)=>{if(!(typeof o!="undefined"&&o))throw"Please provide valid campaign address";const s=new n.providers.JsonRpcBatchProvider(e),a=new n.Contract(r,d.abi,s),c=a.filters.CampaignCreatedEvent();let t=(await a.queryFilter(c)).find(p=>p.args.campignAddress==o);if(!(typeof t!="undefined"&&t))throw"Campaign Not Found!";return{title:t.args.title,campaignaddress:t.args.campignAddress,category:t.args.category,descriptionhash:t.args.descHash,imghash:t.args.imgHash,amountrequired:n.utils.formatEther(t.args.requiredAmount),owner:t.args.owner,email:t.args.email,publisheddate:new Date(parseInt(t.args.timestamp)*1e3).toLocaleString()}},GetCompaignTransactionsFuncJS=async(r,o)=>{const s=new n.providers.JsonRpcBatchProvider(o).getSigner(),a=new n.Contract(r,l.abi,s),c=a.filters.DonatedEvent();return(await a.queryFilter(c)).map(i=>({amount:n.utils.formatEther(i.args.amount),donar:i.args.donar,timestamp:new Date(parseInt(i.args.timestamp)*1e3).toLocaleString()}))},DonateFuncJS=async(r,o)=>{try{console.log(r,o);const e=new n.providers.Web3Provider(window.ethereum,"any"),s=await e.getNetwork(),a=e.getSigner();await(await new n.Contract(r,l.abi,a).DonateFunc({value:n.utils.parseUnits(o.toString(),"ether")})).wait()}catch(e){throw console.log("Error DonateFuncJS",e),JSON.parse(JSON.stringify(e)).reason}},ApproveCampaignFuncJS=async r=>{try{const e=new n.providers.Web3Provider(window.ethereum,"any"),s=await e.getNetwork(),a=e.getSigner();var o=await(await new n.Contract(r,l.abi,a).ApproveFunc()).wait();console.log("Approve campaign result",o)}catch(e){throw console.log("Error ApproveCampaignFuncJS"),console.log(JSON.parse(JSON.stringify(e)).reason),JSON.parse(JSON.stringify(e)).reason}},CreateCampaignFuncJS=async(r,o,e,s)=>{let a=null;console.log("json form",r);let c=w(r.description,o,e),g=y(r.imgClassGuid,r.imgClassGuid,o,e);await Promise.all([g,c]).then(t=>{a={title:r.title,amount:r.amount,category:r.category,imageHash:t[0].pinataHASH,descHash:t[1].pinataHASH,email:r.email},console.log("sibmit form",a)});try{const i=new n.providers.Web3Provider(window.ethereum,"any").getSigner(),p=new n.Contract(s,d.abi,i),m=n.utils.parseEther(r.amount+""),u=await p.CreateCampaignFunc(a.title,m,a.imageHash,a.descHash,a.category,a.email);console.log("CreateCampaignFuncJS result: ",u)}catch(t){throw console.log("Error CreateCampaignFuncJS",t),JSON.parse(JSON.stringify(t)).reason}},GetCompaignUpdatesFuncJS=async(r,o)=>{const s=new n.providers.JsonRpcBatchProvider(o).getSigner(),a=new n.Contract(r,l.abi,s),c=a.filters.UpdateEvent();return(await a.queryFilter(c)).map(i=>({tittle:i.args?.tittle,dsecription:i.args?.dsecription,timestamp:new Date(parseInt(i.args?.timestamp)*1e3).toLocaleString()}))},CampaignUpdateFuncJS=async(r,o,e)=>{try{const s=new n.providers.Web3Provider(window.ethereum,"any"),a=await s.getNetwork(),c=s.getSigner();await(await new n.Contract(r,l.abi,c).UpdateProgress(o,e)).wait()}catch(s){throw console.log("Error CampaignUpdateFuncJS",s),JSON.parse(JSON.stringify(s)).reason}},DistributeRewardFuncJS=async(r,o)=>{try{const e=new n.providers.Web3Provider(window.ethereum,"any"),s=await e.getNetwork(),a=e.getSigner();await(await new n.Contract(r,l.abi,a).DistributeReward({value:n.utils.parseUnits(o.toString(),"ether")})).wait()}catch(e){throw console.log("Error DistributeRewardFuncJS",e),JSON.parse(JSON.stringify(e)).reason}};
